guest:
DONE DL - 1 display all future screenings
DONE, but needs to be moved to guest c from employee 2 search movies by (id - uri param, name):
3 register as user

user:
1 activate
2 authenticate
DONE PS - g1.2 display available seats for a specific screening
g1.3 buy ticket (ability to reserve multiple seats, transaction, separate db row per each seat)
g1.3 continuation - additionally, can purchase only tickets next to each other (e.g. cannot buy seat 1 and 3)
3 show all purchased tickets (active only)
3a and also show tickets per screening
4 cancel ticket (can cancel single or multiple seats)

employee:
DONE PS - 1. crud for movies, screenings

manager:
PS1. crud for auditoriums (and seats)
DL2. deactivate user and employee accounts

entity todos:
//TODO: validate user account ID in external security DB, possibly change primitive type to entity
//TODO: check constraint on Ticket table (whether seat_id is in fact located in a given screening auditorium)

questions:
1. how to implement hashcode and equals correctly for each entity (is default impl using @Data fine?) - of"id"
2. is timezone managed this way ok (set in @PostConstruct and then use local date time)? - ok, maybe app.props property - check in google
3. does screening table need a db trigger (start time + movie length + break for cleaning)? - no, but function to be reviewed by Kacper
4. how to validate not null for integers? they are not triggered as if value is missing in json it is later created with 0
5. detach dto objects from service classes (how)? e.g. create/update screening
6. how to get rid of stack trace from custom exceptions? - disable spring-boot-devtools
7. review project in terms of access (public/private/package pr)